library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ALU_2 is
port(Clock:in std_logic; --input clock signal
A,B : in unsigned(7 downto 0); --8 bit inputs from latches A and B
OP : in unsigned(15 downto 0); --16 bit selector for operation from decoder
Neg : out std_logic; -- is the result negative? Set-ve bit output
R1: out unsigned(3 downto 0); --lower 4-bits of 8-bit result output
R2: out unsigned(3 downto 0)); --higher 4-bits of 8-bit result output
end ALU_2;

architecture calculation of ALU_2 is 
signal Reg1,Reg2,Result, temp: unsigned(7 downto 0) :=(others=> '0'); --temp signal declarations
signal Reg4: unsigned(0 to 7); 
begin
Reg1 <= A; --temporarily store A in Reg1 local variable
Reg2 <= B; --temporarily store B in Reg2 local variable
process(Clock,OP,temp)
	begin	
	if(rising_edge(Clock)) then 
		case OP is
			WHEN "0000000000000001" => --Function 1 Decrement Reg2 by 9. 
			
			if (Reg2 < 9) then
					Result <= Reg2 + ((NOT "00001001") + 1); --NOT inverts all bits, and adding 1 complete the 2's complement operation
			      Neg <= '1';
				elsif (Reg2 >= 9) then
					Result <= (Reg2 - 9);
					Neg <= '0';
				end if;
									
			WHEN "0000000000000010"  => --Function 2 Swap the lower and upper 4 bits of B, where temp is the 4 upper bits of B, and temp1 is the lower 4 bits of B
				temp <= Reg2;
				temp(7 downto 4) <= Reg2(3 downto 0);
				temp(3 downto 0) <= Reg2(7 downto 4);
				Result <= temp;
								
			WHEN "0000000000000100" => --Function 3 Shift A to left by 2 bits, input bit = 0 (SHL)
			Result <= Reg1(5 downto 0) & "00"; --discard two MSB and add "00" as LSB
			Neg <= '0';
				--takes the 6 LSB of Reg1, bits from index 5 to index 0
			-- Shift left by 2, fill the 2 LSB with zeros, the zeros replace the 2 LSB
			--(5 DOWNTO 0) is the 6 MSB of A
			
			WHEN "0000000000001000" => --Function 4 Produce the result of NANDing A and B
				Result <= NOT (Reg1 AND Reg2); --NAND 
				Neg <= '0';
					 
			WHEN "0000000000010000" => --Function 5 Find the greater value of A or B and Output the Max
				if (Reg1 >= Reg2) then
					Result <= A; --since Reg2 is the greater value
				elsif (Reg2 >Reg1) then
					Result <= B; --since Reg1 is the greater value
				end if;
				Neg <= '0';
				
			WHEN "0000000000100000" =>	--Function 6 Invert Even Bits of B
				Result <= (Reg2(7), NOT Reg2(6), Reg2(5), NOT Reg2(4), Reg2(3), NOT Reg2(2), Reg2(1), NOT Reg2(0)); 
				Neg <= '0';
				
			WHEN "0000000001000000" => --Function 7 Produce null on the output
				Result <= "00000000"; --0 represents null
				Neg <= '0';
				
			WHEN "0000000010000000" => --Function 8 Replace the upper four bits of B by upper four bits of A
				temp <= Reg2; --initially assigning B to temp variable
				temp(7 downto 4) <= Reg1(7 downto 4); --temp variable = upper four bits of A
				Result <= temp; --show temp
				Neg <= '0';

			WHEN "0000000100000000" =>--Function 9 Show A on the output
				Result <= A;
				
			WHEN OTHERS =>-- Don't care, no states greater than 9
			
			END CASE;
		END IF;
	END PROCESS;
	
	R1 <= Result(3 downto 0); --only 4-bits, split the 8-bit into 2 4-bits
	R2 <= Result(7 downto 4); --only 4-bits, split the 8-bit into 2 4-bits

END calculation;
